<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

	<!-- <websocket:message-broker application-destination-prefix="/app"> -->
	<!-- <websocket:stomp-endpoint path="/bccontract"> -->
	<!-- <websocket:sockjs/> -->
	<!-- </websocket:stomp-endpoint> -->
	<!-- <websocket:simple-broker prefix="/topic, /queue"/> -->
	<!-- </websocket:message-broker> -->

	<import resource="classpath*:/spring/autonomy-core.xml" />
	<!-- This will automatically locate any and all property files you have 
		within your classpath, provided they fall under the META-INF/spring directory. 
		The located property files are parsed and their values can then be used within 
		application context files in the form of ${propertyKey}. -->
	<context:property-placeholder location="classpath*:META-INF/spring/*.properties" />
	<!-- Turn on AspectJ @Configurable support. As a result, any time you instantiate 
		an object, Spring will attempt to perform dependency injection on that object. 
		This occurs for instantiation via the "new" keyword, as well as via reflection. 
		This is possible because AspectJ is used to "weave" Roo-based applications 
		at compile time. In effect this feature allows dependency injection of any 
		object at all in your system, which is a very useful feature (without @Configurable 
		you'd only be able to dependency inject objects acquired from Spring or subsequently 
		presented to a specific Spring dependency injection method). Roo applications 
		use this useful feature in a number of areas, such as @PersistenceContext 
		injection into entities. -->
	<!-- <context:spring-configured/> -->

	<!-- <bean id="jsonConverter" -->
	<!-- class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"> -->
	<!-- <property name="supportedMediaTypes" value="application/json" /> -->
	<!-- </bean> -->

	<!-- Resolves localized messages*.properties and application.properties 
		files in the application to allow for internationalization. The messages*.properties 
		files translate Roo generated messages which are part of the admin interface, 
		the application.properties resource bundle localizes all application specific 
		messages such as entity names and menu items. -->
	<bean
		class="com.coface.corp.autonomy.i18n.SerializableResourceBundleMessageSource"
		id="messageSource" p:basenames="classpath:i18n/messages"
		p:fallbackToSystemLocale="false" />

<!-- 	<bean class="org.springframework.messaging.simp.SimpMessagingTemplate">		 -->
<!-- 	</bean> -->

	<bean id="restTemplate"	class="org.springframework.web.client.RestTemplate">
		<constructor-arg>
			<bean
				class="org.springframework.http.client.HttpComponentsClientHttpRequestFactory"
				p:readTimeout="30000" p:connectTimeout="20000" />
		</constructor-arg>
	</bean>
	
	<bean id="mailService" class="com.coface.corp.autonomy.service.impl.MailServiceImpl">
		<property name="freemarkerConfiguration" ref="freemarkerConfiguration" />
	</bean>
	
	<bean id="freemarkerConfiguration"
		class="org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean">
		<property name="templateLoaderPath" value="/WEB-INF/freemarker/templates" />
	</bean>
	
	
<!-- 	<property name="messageConverters"> -->
<!-- 			<list> -->
<!-- 			<ref bean="jsonConverter" /> -->
<!-- 		</list> -->
<!-- 		</property> -->
<!-- 	</bean> -->
<!-- 	<bean id="jsonConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"> -->
<!--    		<property name="supportedMediaTypes" value="application/json" /> -->
<!-- 	</bean> -->
</beans>
